#!/usr/bin/env node

const fs = require('fs').promises;
const path = require('path');
const plist = require('plist');
const archiver = require('archiver');
const { program } = require('commander');
const glob = require('glob');
const chalk = require('chalk');

// „Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„Éá„Éº„Çø„ÇíÁîüÊàê
function generateShortcutData(modeKey, modeName, withRecord = false) {
    const actions = [
        {
            WFWorkflowActionIdentifier: "is.workflow.actions.openurl",
            WFWorkflowActionParameters: {
                WFURL: `superwhisper://mode?key=${modeKey}`
            }
        }
    ];
    
    if (withRecord) {
        actions.push({
            WFWorkflowActionIdentifier: "is.workflow.actions.openurl",
            WFWorkflowActionParameters: {
                WFURL: "superwhisper://record"
            }
        });
    }
    
    return {
        WFWorkflowClientVersion: "2605",
        WFWorkflowClientRelease: "2.2.2",
        WFWorkflowIcon: {
            WFWorkflowIconStartColor: 4274264319,
            WFWorkflowIconGlyphNumber: 59511
        },
        WFWorkflowImportQuestions: [],
        WFWorkflowTypes: ["NCWidget", "WatchKit"],
        WFWorkflowInputContentItemClasses: [
            "WFAppContentItem",
            "WFAppStoreAppContentItem",
            "WFArticleContentItem",
            "WFContactContentItem",
            "WFDateContentItem",
            "WFEmailAddressContentItem",
            "WFFolderContentItem",
            "WFGenericFileContentItem",
            "WFImageContentItem",
            "WFiTunesProductContentItem",
            "WFLocationContentItem",
            "WFDCMapsLinkContentItem",
            "WFAVAssetContentItem",
            "WFPDFContentItem",
            "WFPhoneNumberContentItem",
            "WFRichTextContentItem",
            "WFSafariWebPageContentItem",
            "WFStringContentItem",
            "WFURLContentItem"
        ],
        WFWorkflowActions: actions,
        WFWorkflowMinimumClientVersionString: "900",
        WFWorkflowMinimumClientVersion: 900
    };
}

// „Éê„Ç§„Éä„É™plist„ÇíÁîüÊàê
async function generateBinaryPlist(data) {
    return plist.build(data);
}

// JSON„Éï„Ç°„Ç§„É´„Åã„Çâ„É¢„Éº„ÉâÊÉÖÂ†±„ÇíË™≠„ÅøËæº„Åø
async function loadModeFromFile(filePath) {
    try {
        const content = await fs.readFile(filePath, 'utf8');
        const mode = JSON.parse(content);
        
        if (!mode.key || !mode.name) {
            console.warn(chalk.yellow(`‚ö†Ô∏è  Invalid mode file: ${filePath} (missing key or name)`));
            return null;
        }
        
        return mode;
    } catch (error) {
        console.error(chalk.red(`‚ùå Error reading ${filePath}: ${error.message}`));
        return null;
    }
}

// „Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê
async function generateShortcutFile(mode, outputDir, withRecord = false) {
    try {
        const shortcutData = generateShortcutData(mode.key, mode.name, withRecord);
        const binaryPlist = await generateBinaryPlist(shortcutData);
        
        const suffix = withRecord ? ' + Èå≤Èü≥' : '';
        const fileName = `${mode.name}${suffix}.shortcut`;
        const filePath = path.join(outputDir, fileName);
        
        await fs.writeFile(filePath, binaryPlist);
        
        return { success: true, fileName, filePath };
    } catch (error) {
        return { success: false, error: error.message };
    }
}

// URL„Éï„Ç°„Ç§„É´„ÇíÁîüÊàê
async function generateURLFile(mode, outputDir, withRecord = false) {
    const deepLink = `superwhisper://mode?key=${mode.key}`;
    let content = `${mode.name} - Superwhisper Deep Link\n\n`;
    content += `Deep Link URL:\n${deepLink}\n\n`;
    
    if (withRecord) {
        content += `Èå≤Èü≥ÈñãÂßã URL:\nsuperwhisper://record\n\n`;
    }
    
    content += `‰Ωø„ÅÑÊñπ:\n`;
    content += `1. iOS„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„Ç¢„Éó„É™„ÇíÈñã„Åè\n`;
    content += `2. Âè≥‰∏ä„ÅÆ + „Çí„Çø„ÉÉ„Éó\n`;
    content += `3. „Äå„Ç¢„ÇØ„Ç∑„Éß„É≥„ÇíËøΩÂä†„Äç„Çí„Çø„ÉÉ„Éó\n`;
    content += `4. „ÄåURL„Äç„ÅßÊ§úÁ¥¢„Åó„ÄåURL„ÇíÈñã„Åè„Äç„ÇíÈÅ∏Êäû\n`;
    content += `5. URLÊ¨Ñ„Å´‰∏äË®ò„ÅÆDeep Link URL„Çí„Éö„Éº„Çπ„Éà\n`;
    if (withRecord) {
        content += `6. „ÇÇ„ÅÜ‰∏ÄÂ∫¶„ÄåURL„ÇíÈñã„Åè„Äç„ÇíËøΩÂä†„Åó„ÄÅÈå≤Èü≥ÈñãÂßãURL„Çí„Éö„Éº„Çπ„Éà\n`;
    }
    content += `${withRecord ? '7' : '6'}. Âè≥‰∏ä„ÅÆ„ÄåÊ¨°„Å∏„Äç„Çí„Çø„ÉÉ„Éó„Åó„Å¶„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„ÉàÂêç„ÇíË®≠ÂÆö\n`;
    content += `${withRecord ? '8' : '7'}. „ÄåÂÆå‰∫Ü„Äç„Çí„Çø„ÉÉ„Éó\n`;
    
    const suffix = withRecord ? ' + Èå≤Èü≥' : '';
    const fileName = `${mode.name}${suffix} - URL.txt`;
    const filePath = path.join(outputDir, fileName);
    
    await fs.writeFile(filePath, content, 'utf8');
    
    return { fileName, filePath };
}

// ZIP„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
async function createZip(files, outputPath) {
    return new Promise((resolve, reject) => {
        const output = require('fs').createWriteStream(outputPath);
        const archive = archiver('zip', { zlib: { level: 9 } });
        
        output.on('close', () => resolve());
        archive.on('error', (err) => reject(err));
        
        archive.pipe(output);
        
        for (const file of files) {
            archive.file(file.path, { name: file.name });
        }
        
        archive.finalize();
    });
}

// „É°„Ç§„É≥Âá¶ÁêÜ
async function main() {
    program
        .version('1.0.0')
        .description('Superwhisper iOS Shortcut Generator')
        .option('-i, --input <path>', 'Input directory or file path', '.')
        .option('-o, --output <path>', 'Output directory', './shortcuts')
        .option('-r, --with-record', 'Generate shortcuts with recording action')
        .option('-z, --zip', 'Create ZIP file of all shortcuts')
        .parse(process.argv);
    
    const options = program.opts();
    
    console.log(chalk.cyan('üé§ Superwhisper Shortcut Generator\n'));
    
    // Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
    await fs.mkdir(options.output, { recursive: true });
    
    // ÂÖ•Âäõ„Éï„Ç°„Ç§„É´„ÇíÊ§úÁ¥¢
    let jsonFiles = [];
    const inputStat = await fs.stat(options.input).catch(() => null);
    
    if (inputStat && inputStat.isDirectory()) {
        // „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÂ†¥Âêà
        const pattern = path.join(options.input, '**/*.json');
        jsonFiles = glob.sync(pattern);
        console.log(chalk.blue(`üìÅ Searching for JSON files in: ${options.input}`));
    } else if (inputStat && inputStat.isFile() && options.input.endsWith('.json')) {
        // Âçò‰∏Ä„Éï„Ç°„Ç§„É´„ÅÆÂ†¥Âêà
        jsonFiles = [options.input];
    } else {
        console.error(chalk.red('‚ùå Invalid input path'));
        process.exit(1);
    }
    
    if (jsonFiles.length === 0) {
        console.error(chalk.red('‚ùå No JSON files found'));
        process.exit(1);
    }
    
    console.log(chalk.green(`‚úÖ Found ${jsonFiles.length} JSON files\n`));
    
    // ÂêÑ„Éï„Ç°„Ç§„É´„ÇíÂá¶ÁêÜ
    const generatedFiles = [];
    let successCount = 0;
    let errorCount = 0;
    
    for (const jsonFile of jsonFiles) {
        const mode = await loadModeFromFile(jsonFile);
        if (!mode) {
            errorCount++;
            continue;
        }
        
        console.log(chalk.blue(`üì± Processing: ${mode.name} (${mode.key})`));
        
        // ÈÄöÂ∏∏„ÅÆ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà
        const result = await generateShortcutFile(mode, options.output, false);
        if (result.success) {
            console.log(chalk.green(`   ‚úÖ ${result.fileName}`));
            generatedFiles.push({ path: result.filePath, name: result.fileName });
            successCount++;
        } else {
            console.log(chalk.red(`   ‚ùå Failed: ${result.error}`));
            // URL„Éï„Ç°„Ç§„É´„Çí‰ª£Êõø„Å®„Åó„Å¶ÁîüÊàê
            const urlFile = await generateURLFile(mode, options.output, false);
            console.log(chalk.yellow(`   üìÑ ${urlFile.fileName} (fallback)`));
            generatedFiles.push({ path: urlFile.filePath, name: urlFile.fileName });
        }
        
        // Èå≤Èü≥‰ªò„Åç„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„ÉàÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
        if (options.withRecord) {
            const recordResult = await generateShortcutFile(mode, options.output, true);
            if (recordResult.success) {
                console.log(chalk.green(`   ‚úÖ ${recordResult.fileName}`));
                generatedFiles.push({ path: recordResult.filePath, name: recordResult.fileName });
            } else {
                const urlFile = await generateURLFile(mode, options.output, true);
                console.log(chalk.yellow(`   üìÑ ${urlFile.fileName} (fallback)`));
                generatedFiles.push({ path: urlFile.filePath, name: urlFile.fileName });
            }
        }
    }
    
    // ZIP„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàêÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
    if (options.zip && generatedFiles.length > 0) {
        const zipPath = path.join(options.output, 'superwhisper-shortcuts.zip');
        console.log(chalk.blue('\nüì¶ Creating ZIP file...'));
        
        try {
            await createZip(generatedFiles, zipPath);
            console.log(chalk.green(`‚úÖ ZIP file created: ${zipPath}`));
        } catch (error) {
            console.error(chalk.red(`‚ùå ZIP creation failed: ${error.message}`));
        }
    }
    
    // ÁµêÊûú„Çµ„Éû„É™„Éº
    console.log(chalk.cyan('\nüìä Summary:'));
    console.log(chalk.green(`   ‚úÖ Success: ${successCount} files`));
    if (errorCount > 0) {
        console.log(chalk.red(`   ‚ùå Errors: ${errorCount} files`));
    }
    console.log(chalk.blue(`   üìÅ Output: ${options.output}`));
}

// „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
process.on('unhandledRejection', (error) => {
    console.error(chalk.red(`\n‚ùå Unexpected error: ${error.message}`));
    process.exit(1);
});

// ÂÆüË°å
main().catch((error) => {
    console.error(chalk.red(`\n‚ùå Fatal error: ${error.message}`));
    process.exit(1);
});